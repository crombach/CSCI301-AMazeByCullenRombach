package edu.wm.cs.cs301.cullenrombach.ui;

import java.io.FileOutputStream;
import android.app.Activity;
import android.content.Context;
import android.content.Intent;
import android.os.Bundle;
import android.util.Log;
import android.view.Menu;
import android.view.MenuItem;
import android.view.View;
import android.widget.TextView;
import edu.wm.cs.cs301.cullenrombach.R;
import edu.wm.cs.cs301.cullenrombach.R.id;
import edu.wm.cs.cs301.cullenrombach.R.layout;
import edu.wm.cs.cs301.cullenrombach.R.menu;
import edu.wm.cs.cs301.cullenrombach.falstad.Maze;
import edu.wm.cs.cs301.cullenrombach.falstad.MazeBuilder;
import edu.wm.cs.cs301.cullenrombach.falstad.MazeFileWriter;

public class FinishActivity extends Activity {
	
	private boolean userWon; // Holds whether or not the user won.
	private TextView header, subheader, pathLabel, energyLabel;
	private int energyConsumed, pathLength, mazeSize;

	@Override
	protected void onCreate(Bundle savedInstanceState) {
		super.onCreate(savedInstanceState);
		setContentView(R.layout.activity_finish);
		
		// Get the information passed from PlayActivity.
		Bundle extras = getIntent().getExtras();
		if (extras != null) {
			userWon = extras.getBoolean("userWon");
			pathLength = extras.getInt("pathLength");
			energyConsumed = extras.getInt("energyConsumed");
			mazeSize = extras.getInt("mazeSize");
		}
		
		// Set up the UI depending upon what happened in the game.
		// The default is that the user won, so we only need to change things if they lost.
		if(!userWon) {
			header = (TextView)findViewById(R.id.finishHeaderLabel);
			subheader = (TextView)findViewById(R.id.finishSubheaderLabel);
			
			header.setText(getString(R.string.finish_header_lose));
			subheader.setText(getString(R.string.finish_subheader_lose));
		}
		
		// Update the path length and energy consumption text views.
		energyLabel = (TextView)findViewById(R.id.energyUsedNumberLabel);
		pathLabel = (TextView)findViewById(R.id.pathLengthNumberLabel);
		
		energyLabel.setText("" + energyConsumed);
		pathLabel.setText("" + pathLength);
	}

	@Override
	public boolean onCreateOptionsMenu(Menu menu) {
		// Inflate the menu; this adds items to the action bar if it is present.
		getMenuInflater().inflate(R.menu.finish, menu);
		return true;
	}

	@Override
	public boolean onOptionsItemSelected(MenuItem item) {
		// Handle action bar item clicks here. The action bar will
		// automatically handle clicks on the Home/Up button, so long
		// as you specify a parent activity in AndroidManifest.xml.
		//int id = item.getItemId();
		return super.onOptionsItemSelected(item);
	}
	
	/**
	 * Go back to the home screen if the back button was pressed.
	 */
	@Override
    public void onBackPressed()
    {
		// Log what we're doing.
		Log.v("FinishActivity", "Moving to AMazeActivity");
		
		// Go back to the main screen.
        Intent intent = new Intent(this, AMazeActivity.class);
        startActivity(intent);
        
        // Finish this activity.
     	this.finish();
    }
	
	/**
	 * Called when the user clicks the back button, sends them to the AMaze
	 * activity.
	 * @param view The view that was clicked.
	 */
	public void moveToAMaze(View view) {
		// Log what we're doing.
		Log.v("FinishActivity", "Moving to AMaze");
		
		// Move to the next screen.
		Intent intent = new Intent(this, AMazeActivity.class);
		startActivity(intent);
		
		// Finish this activity.
     	this.finish();
	}
	
	/**
	 * Called when the user clicks the Save Maze button, saves the maze for later use.
	 * @param view The view that was clicked.
	 */
	public void saveMaze(View view) {
		// Log what we're doing.
		Log.v("FinishActivity", "Saving Maze...");
		
		// Store some local variables used for writing.
		String filename = "maze_of_size_" + mazeSize + ".xml";
		Maze maze = GeneratingActivity.maze;
		final int[] pos = maze.getDistances().getStartPosition();
		int startx = pos[0] ;
		int starty = pos[1] ;
		
		MazeFileWriter.store(this, filename, maze.getWidth(), maze.getHeight(), 0 /*number of rooms doesn't matter*/,
				0 /* expectedPartiters doesn't matter*/, maze.getRootnode(), maze.getCells(), maze.getDistances().dists,
				startx, starty);
		
		// Log what we're doing.
		Log.v("FinishActivity", "Maze Saved");
	}
}
